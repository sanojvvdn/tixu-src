diff --git a/arch/arm/boot/dts/imx6sl-tixu.dts b/arch/arm/boot/dts/imx6sl-tixu.dts
index c43fe2b..d5cb29a 100644
--- a/arch/arm/boot/dts/imx6sl-tixu.dts
+++ b/arch/arm/boot/dts/imx6sl-tixu.dts
@@ -228,8 +228,9 @@
 	tps: tps@12 {
 		compatible = "ti,tps65910";
 		reg = <0x12>;
-		interrupt-parent = <&intc>;
-		interrupts = <3 21 IRQ_TYPE_LEVEL_LOW>;
+		interrupt-parent = <&gpio3>;
+		interrupts = <21 IRQ_TYPE_LEVEL_HIGH>;
+
 		ti,en-ck32k-xtal;
         #interrupt-cells = <2>;
         interrupt-controller;
@@ -457,6 +458,7 @@
 				MX6SL_PAD_SD2_CLK__GPIO5_IO05     	0x41b0b1	// BT_RESET
 				MX6SL_PAD_EPDC_GDCLK__GPIO1_IO31 	0x1b0b0		// USB_HUB_RESET
 				MX6SL_PAD_LCD_VSYNC__GPIO2_IO18 	0x1b0b0 	// Hardware_RESET
+				MX6SL_PAD_REF_CLK_24M__GPIO3_IO21	0x41b0b1	// PMIC_IRQ
 				MX6SL_PAD_WDOG_B__WDOG1_RESET_B_DEB 	0x110b0 	// WATCHDOG RESET
 				MX6SL_PAD_EPDC_D11__GPIO1_IO18 		0x1b0b0  	// FACT_LED
 				MX6SL_PAD_EPDC_D10__GPIO1_IO17 		0x1b0b0  	// RST_LED
diff --git a/drivers/mfd/tps65910.c b/drivers/mfd/tps65910.c
index 8e439b4..4d3d0c9 100644
--- a/drivers/mfd/tps65910.c
+++ b/drivers/mfd/tps65910.c
@@ -231,6 +231,7 @@ static int tps65910_irq_init(struct tps65910 *tps65910, int irq,
 {
 	int ret = 0;
 	static struct regmap_irq_chip *tps6591x_irqs_chip;
+	tps65910->i2c_client->addr = TPS65910_CTL_I2C;
 
 	if (!irq) {
 		dev_warn(tps65910->dev, "No interrupt support, no core IRQ\n");
@@ -259,6 +260,7 @@ static int tps65910_irq_init(struct tps65910 *tps65910, int irq,
 		dev_warn(tps65910->dev, "Failed to add irq_chip %d\n", ret);
 		tps65910->chip_irq = 0;
 	}
+	tps65910->i2c_client->addr = TPS65910_SR_I2C;
 	return ret;
 }
 
diff --git a/drivers/rtc/rtc-tps65910.c b/drivers/rtc/rtc-tps65910.c
index 7af0020..80eb2c5 100644
--- a/drivers/rtc/rtc-tps65910.c
+++ b/drivers/rtc/rtc-tps65910.c
@@ -20,6 +20,7 @@
 #include <linux/module.h>
 #include <linux/types.h>
 #include <linux/rtc.h>
+#include <linux/i2c.h>
 #include <linux/bcd.h>
 #include <linux/platform_device.h>
 #include <linux/interrupt.h>
@@ -37,6 +38,7 @@ static int tps65910_rtc_alarm_irq_enable(struct device *dev, unsigned enabled)
 {
 	struct tps65910 *tps = dev_get_drvdata(dev->parent);
 	u8 val = 0;
+	tps->i2c_client->addr = TPS65910_CTL_I2C;
 
 	if (enabled)
 		val = TPS65910_RTC_INTERRUPTS_IT_ALARM;
@@ -58,6 +60,7 @@ static int tps65910_rtc_read_time(struct device *dev, struct rtc_time *tm)
 	unsigned char rtc_data[NUM_TIME_REGS];
 	struct tps65910 *tps = dev_get_drvdata(dev->parent);
 	int ret;
+	tps->i2c_client->addr = TPS65910_CTL_I2C;
 
 	/* Copy RTC counting registers to static registers or latches */
 	ret = regmap_update_bits(tps->regmap, TPS65910_RTC_CTRL,
@@ -89,6 +92,7 @@ static int tps65910_rtc_set_time(struct device *dev, struct rtc_time *tm)
 	unsigned char rtc_data[NUM_TIME_REGS];
 	struct tps65910 *tps = dev_get_drvdata(dev->parent);
 	int ret;
+	tps->i2c_client->addr = TPS65910_CTL_I2C;
 
 	rtc_data[0] = bin2bcd(tm->tm_sec);
 	rtc_data[1] = bin2bcd(tm->tm_min);
@@ -131,6 +135,7 @@ static int tps65910_rtc_read_alarm(struct device *dev, struct rtc_wkalrm *alm)
 	u32 int_val;
 	struct tps65910 *tps = dev_get_drvdata(dev->parent);
 	int ret;
+	tps->i2c_client->addr = TPS65910_CTL_I2C;
 
 	ret = regmap_bulk_read(tps->regmap, TPS65910_SECONDS, alarm_data,
 		NUM_TIME_REGS);
@@ -161,10 +166,7 @@ static int tps65910_rtc_set_alarm(struct device *dev, struct rtc_wkalrm *alm)
 	unsigned char alarm_data[NUM_TIME_REGS];
 	struct tps65910 *tps = dev_get_drvdata(dev->parent);
 	int ret;
-
-	ret = tps65910_rtc_alarm_irq_enable(dev, 0);
-	if (ret)
-		return ret;
+	tps->i2c_client->addr = TPS65910_CTL_I2C;
 
 	alarm_data[0] = bin2bcd(alm->time.tm_sec);
 	alarm_data[1] = bin2bcd(alm->time.tm_min);
@@ -195,6 +197,7 @@ static irqreturn_t tps65910_rtc_interrupt(int irq, void *rtc)
 	struct tps65910_rtc *tps_rtc = dev_get_drvdata(dev);
 	int ret;
 	u32 rtc_reg;
+	tps->i2c_client->addr = TPS65910_CTL_I2C;
 
 	ret = regmap_read(tps->regmap, TPS65910_RTC_STATUS, &rtc_reg);
 	if (ret)
@@ -225,17 +228,23 @@ static int tps65910_rtc_probe(struct platform_device *pdev)
 {
 	struct tps65910 *tps65910 = NULL;
 	struct tps65910_rtc *tps_rtc = NULL;
-	int ret;
-	int irq;
+	int ret, err;
 	u32 rtc_reg;
 
 	tps65910 = dev_get_drvdata(pdev->dev.parent);
 
+	tps65910->i2c_client->addr = TPS65910_CTL_I2C;
+
 	tps_rtc = devm_kzalloc(&pdev->dev, sizeof(struct tps65910_rtc),
 			GFP_KERNEL);
 	if (!tps_rtc)
 		return -ENOMEM;
 
+	tps_rtc->irq = platform_get_irq(pdev, 0);
+	if (tps_rtc->irq < 0)
+                return tps_rtc->irq;
+
+
 	/* Clear pending interrupts */
 	ret = regmap_read(tps65910->regmap, TPS65910_RTC_STATUS, &rtc_reg);
 	if (ret < 0)
@@ -258,22 +267,17 @@ static int tps65910_rtc_probe(struct platform_device *pdev)
 	if (ret < 0)
 		return ret;
 
-	irq  = platform_get_irq(pdev, 0);
-	if (irq <= 0) {
-		dev_warn(&pdev->dev, "Wake up is not possible as irq = %d\n",
-			irq);
-		return -ENXIO;
-	}
-
-	ret = devm_request_threaded_irq(&pdev->dev, irq, NULL,
-		tps65910_rtc_interrupt, IRQF_TRIGGER_LOW | IRQF_EARLY_RESUME,
+	ret = devm_request_threaded_irq(&pdev->dev, tps_rtc->irq,NULL,
+		tps65910_rtc_interrupt, IRQF_TRIGGER_LOW | IRQF_NO_SUSPEND | IRQF_SHARED,
 		dev_name(&pdev->dev), &pdev->dev);
 	if (ret < 0) {
 		dev_err(&pdev->dev, "IRQ is not free.\n");
 		return ret;
 	}
-	tps_rtc->irq = irq;
-	device_set_wakeup_capable(&pdev->dev, 1);
+
+	dev_set_drvdata(&pdev->dev, tps_rtc);
+	platform_set_drvdata(pdev, tps_rtc);
+	device_init_wakeup(&pdev->dev, 1);
 
 	tps_rtc->rtc = devm_rtc_device_register(&pdev->dev, pdev->name,
 		&tps65910_rtc_ops, THIS_MODULE);
@@ -283,8 +287,6 @@ static int tps65910_rtc_probe(struct platform_device *pdev)
 		return ret;
 	}
 
-	platform_set_drvdata(pdev, tps_rtc);
-
 	return 0;
 }
 
diff --git a/include/linux/mfd/tps65910.h b/include/linux/mfd/tps65910.h
index aca0777..33518a8 100644
--- a/include/linux/mfd/tps65910.h
+++ b/include/linux/mfd/tps65910.h
@@ -28,6 +28,12 @@
 #define REGULATOR_LDO			0
 #define REGULATOR_DCDC			1
 
+/* 
+ * TPS65910 I2C Addresses
+ */
+
+#define TPS65910_SR_I2C			0x12
+#define TPS65910_CTL_I2C		0x2d
 /*
  * List of registers for component TPS65910
  *
